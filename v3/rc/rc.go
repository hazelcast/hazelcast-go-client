// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package rc

import (
	"bytes"
	"database/sql/driver"
	"errors"
	"fmt"

	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type Lang int64

const (
	Lang_JAVASCRIPT Lang = 1
	Lang_GROOVY     Lang = 2
	Lang_PYTHON     Lang = 3
	Lang_RUBY       Lang = 4
)

func (p Lang) String() string {
	switch p {
	case Lang_JAVASCRIPT:
		return "JAVASCRIPT"
	case Lang_GROOVY:
		return "GROOVY"
	case Lang_PYTHON:
		return "PYTHON"
	case Lang_RUBY:
		return "RUBY"
	}
	return "<UNSET>"
}

func LangFromString(s string) (Lang, error) {
	switch s {
	case "JAVASCRIPT":
		return Lang_JAVASCRIPT, nil
	case "GROOVY":
		return Lang_GROOVY, nil
	case "PYTHON":
		return Lang_PYTHON, nil
	case "RUBY":
		return Lang_RUBY, nil
	}
	return Lang(0), fmt.Errorf("not a valid Lang string")
}

func LangPtr(v Lang) *Lang { return &v }

func (p Lang) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *Lang) UnmarshalText(text []byte) error {
	q, err := LangFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *Lang) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = Lang(v)
	return nil
}

func (p *Lang) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// Attributes:
//  - ID
type Cluster struct {
	ID string `thrift:"id,1" db:"id" json:"id"`
}

func NewCluster() *Cluster {
	return &Cluster{}
}

func (p *Cluster) GetID() string {
	return p.ID
}

func (p *Cluster) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Cluster) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Cluster) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Cluster"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Cluster) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *Cluster) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Cluster(%+v)", *p)
}

// Attributes:
//  - UUID
//  - Host
//  - Port
type Member struct {
	UUID string `thrift:"uuid,1" db:"uuid" json:"uuid"`
	Host string `thrift:"host,2" db:"host" json:"host"`
	Port int32  `thrift:"port,3" db:"port" json:"port"`
}

func NewMember() *Member {
	return &Member{}
}

func (p *Member) GetUUID() string {
	return p.UUID
}

func (p *Member) GetHost() string {
	return p.Host
}

func (p *Member) GetPort() int32 {
	return p.Port
}

func (p *Member) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Member) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UUID = v
	}
	return nil
}

func (p *Member) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Host = v
	}
	return nil
}

func (p *Member) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Port = v
	}
	return nil
}

func (p *Member) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Member"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Member) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uuid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uuid: ", p), err)
	}
	if err := oprot.WriteString(string(p.UUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uuid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uuid: ", p), err)
	}
	return err
}

func (p *Member) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("host", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:host: ", p), err)
	}
	if err := oprot.WriteString(string(p.Host)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.host (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:host: ", p), err)
	}
	return err
}

func (p *Member) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("port", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:port: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Port)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.port (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:port: ", p), err)
	}
	return err
}

func (p *Member) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Member(%+v)", *p)
}

// Attributes:
//  - Success
//  - Message
//  - Result_
type Response struct {
	Success bool   `thrift:"success,1" db:"success" json:"success"`
	Message string `thrift:"message,2" db:"message" json:"message"`
	Result_ []byte `thrift:"result,3" db:"result" json:"result"`
}

func NewResponse() *Response {
	return &Response{}
}

func (p *Response) GetSuccess() bool {
	return p.Success
}

func (p *Response) GetMessage() string {
	return p.Message
}

func (p *Response) GetResult_() []byte {
	return p.Result_
}

func (p *Response) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Response) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *Response) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *Response) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Result_ = v
	}
	return nil
}

func (p *Response) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Response"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Response) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:success: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Success)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.success (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:success: ", p), err)
	}
	return err
}

func (p *Response) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err)
	}
	return err
}

func (p *Response) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("result", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:result: ", p), err)
	}
	if err := oprot.WriteBinary(p.Result_); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.result (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:result: ", p), err)
	}
	return err
}

func (p *Response) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Response(%+v)", *p)
}

// Attributes:
//  - Message
type ServerException struct {
	Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewServerException() *ServerException {
	return &ServerException{}
}

func (p *ServerException) GetMessage() string {
	return p.Message
}

func (p *ServerException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ServerException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *ServerException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ServerException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ServerException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err)
	}
	return err
}

func (p *ServerException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServerException(%+v)", *p)
}

func (p *ServerException) Error() string {
	return p.String()
}

type RemoteController interface {
	Ping() (r bool, err error)
	Clean() (r bool, err error)
	Exit() (r bool, err error)
	// Parameters:
	//  - HzVersion
	//  - Xmlconfig
	CreateCluster(hzVersion string, xmlconfig string) (r *Cluster, err error)
	// Parameters:
	//  - ClusterId
	StartMember(clusterId string) (r *Member, err error)
	// Parameters:
	//  - ClusterId
	//  - MemberId
	ShutdownMember(clusterId string, memberId string) (r bool, err error)
	// Parameters:
	//  - ClusterId
	//  - MemberId
	TerminateMember(clusterId string, memberId string) (r bool, err error)
	// Parameters:
	//  - ClusterId
	//  - MemberId
	SuspendMember(clusterId string, memberId string) (r bool, err error)
	// Parameters:
	//  - ClusterId
	//  - MemberId
	ResumeMember(clusterId string, memberId string) (r bool, err error)
	// Parameters:
	//  - ClusterId
	ShutdownCluster(clusterId string) (r bool, err error)
	// Parameters:
	//  - ClusterId
	TerminateCluster(clusterId string) (r bool, err error)
	// Parameters:
	//  - MemberId
	SplitMemberFromCluster(memberId string) (r *Cluster, err error)
	// Parameters:
	//  - ClusterId
	//  - MemberId
	MergeMemberToCluster(clusterId string, memberId string) (r *Cluster, err error)
	// Parameters:
	//  - ClusterId
	//  - Script
	//  - Lang
	ExecuteOnController(clusterId string, script string, lang Lang) (r *Response, err error)
}

type RemoteControllerClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewRemoteControllerClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *RemoteControllerClient {
	return &RemoteControllerClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewRemoteControllerClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *RemoteControllerClient {
	return &RemoteControllerClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

func NewRemoteControllerClient(hostPort string) (rc *RemoteControllerClient, err error) {
	tSocket, err := thrift.NewTSocket(hostPort)
	if err != nil {
		fmt.Println("Error opening socket:", err)
		return
	}
	if tSocket == nil {
		err = fmt.Errorf("Error opening socket, got nil transport. Is server available?")
		return
	}

	transportFactory := thrift.NewTBufferedTransportFactory(8192)
	transport := transportFactory.GetTransport(tSocket)

	err = transport.Open()
	if err != nil {
		return
	}
	//defer transport.Close()

	protocolFactory := thrift.NewTBinaryProtocolFactoryDefault()
	rc = NewRemoteControllerClientFactory(transport, protocolFactory)
	return
}

func (p *RemoteControllerClient) Ping() (r bool, err error) {
	if err = p.sendPing(); err != nil {
		return
	}
	return p.recvPing()
}

func (p *RemoteControllerClient) sendPing() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("ping", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RemoteControllerPingArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *RemoteControllerClient) recvPing() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "ping" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "ping failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "ping failed: invalid message type")
		return
	}
	result := RemoteControllerPingResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

func (p *RemoteControllerClient) Clean() (r bool, err error) {
	if err = p.sendClean(); err != nil {
		return
	}
	return p.recvClean()
}

func (p *RemoteControllerClient) sendClean() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("clean", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RemoteControllerCleanArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *RemoteControllerClient) recvClean() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "clean" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "clean failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "clean failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "clean failed: invalid message type")
		return
	}
	result := RemoteControllerCleanResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

func (p *RemoteControllerClient) Exit() (r bool, err error) {
	if err = p.sendExit(); err != nil {
		return
	}
	return p.recvExit()
}

func (p *RemoteControllerClient) sendExit() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("exit", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RemoteControllerExitArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *RemoteControllerClient) recvExit() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "exit" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "exit failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "exit failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error5 error
		error5, err = error4.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error5
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "exit failed: invalid message type")
		return
	}
	result := RemoteControllerExitResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - HzVersion
//  - Xmlconfig
func (p *RemoteControllerClient) CreateCluster(hzVersion string, xmlconfig string) (r *Cluster, err error) {
	if err = p.sendCreateCluster(hzVersion, xmlconfig); err != nil {
		return
	}
	return p.recvCreateCluster()
}

func (p *RemoteControllerClient) sendCreateCluster(hzVersion string, xmlconfig string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createCluster", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RemoteControllerCreateClusterArgs{
		HzVersion: hzVersion,
		Xmlconfig: xmlconfig,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *RemoteControllerClient) recvCreateCluster() (value *Cluster, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "createCluster" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createCluster failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createCluster failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error7
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createCluster failed: invalid message type")
		return
	}
	result := RemoteControllerCreateClusterResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.ServerException != nil {
		err = result.ServerException
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ClusterId
func (p *RemoteControllerClient) StartMember(clusterId string) (r *Member, err error) {
	if err = p.sendStartMember(clusterId); err != nil {
		return
	}
	return p.recvStartMember()
}

func (p *RemoteControllerClient) sendStartMember(clusterId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("startMember", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RemoteControllerStartMemberArgs{
		ClusterId: clusterId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *RemoteControllerClient) recvStartMember() (value *Member, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "startMember" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "startMember failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "startMember failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error9 error
		error9, err = error8.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error9
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "startMember failed: invalid message type")
		return
	}
	result := RemoteControllerStartMemberResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.ServerException != nil {
		err = result.ServerException
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ClusterId
//  - MemberId
func (p *RemoteControllerClient) ShutdownMember(clusterId string, memberId string) (r bool, err error) {
	if err = p.sendShutdownMember(clusterId, memberId); err != nil {
		return
	}
	return p.recvShutdownMember()
}

func (p *RemoteControllerClient) sendShutdownMember(clusterId string, memberId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("shutdownMember", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RemoteControllerShutdownMemberArgs{
		ClusterId: clusterId,
		MemberId:  memberId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *RemoteControllerClient) recvShutdownMember() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "shutdownMember" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "shutdownMember failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "shutdownMember failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error11 error
		error11, err = error10.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error11
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "shutdownMember failed: invalid message type")
		return
	}
	result := RemoteControllerShutdownMemberResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ClusterId
//  - MemberId
func (p *RemoteControllerClient) TerminateMember(clusterId string, memberId string) (r bool, err error) {
	if err = p.sendTerminateMember(clusterId, memberId); err != nil {
		return
	}
	return p.recvTerminateMember()
}

func (p *RemoteControllerClient) sendTerminateMember(clusterId string, memberId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("terminateMember", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RemoteControllerTerminateMemberArgs{
		ClusterId: clusterId,
		MemberId:  memberId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *RemoteControllerClient) recvTerminateMember() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "terminateMember" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "terminateMember failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "terminateMember failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error12 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error13 error
		error13, err = error12.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error13
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "terminateMember failed: invalid message type")
		return
	}
	result := RemoteControllerTerminateMemberResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ClusterId
//  - MemberId
func (p *RemoteControllerClient) SuspendMember(clusterId string, memberId string) (r bool, err error) {
	if err = p.sendSuspendMember(clusterId, memberId); err != nil {
		return
	}
	return p.recvSuspendMember()
}

func (p *RemoteControllerClient) sendSuspendMember(clusterId string, memberId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("suspendMember", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RemoteControllerSuspendMemberArgs{
		ClusterId: clusterId,
		MemberId:  memberId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *RemoteControllerClient) recvSuspendMember() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "suspendMember" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "suspendMember failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "suspendMember failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error14 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error15 error
		error15, err = error14.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error15
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "suspendMember failed: invalid message type")
		return
	}
	result := RemoteControllerSuspendMemberResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ClusterId
//  - MemberId
func (p *RemoteControllerClient) ResumeMember(clusterId string, memberId string) (r bool, err error) {
	if err = p.sendResumeMember(clusterId, memberId); err != nil {
		return
	}
	return p.recvResumeMember()
}

func (p *RemoteControllerClient) sendResumeMember(clusterId string, memberId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("resumeMember", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RemoteControllerResumeMemberArgs{
		ClusterId: clusterId,
		MemberId:  memberId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *RemoteControllerClient) recvResumeMember() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "resumeMember" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "resumeMember failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "resumeMember failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error16 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error17 error
		error17, err = error16.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error17
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "resumeMember failed: invalid message type")
		return
	}
	result := RemoteControllerResumeMemberResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ClusterId
func (p *RemoteControllerClient) ShutdownCluster(clusterId string) (r bool, err error) {
	if err = p.sendShutdownCluster(clusterId); err != nil {
		return
	}
	return p.recvShutdownCluster()
}

func (p *RemoteControllerClient) sendShutdownCluster(clusterId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("shutdownCluster", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RemoteControllerShutdownClusterArgs{
		ClusterId: clusterId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *RemoteControllerClient) recvShutdownCluster() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "shutdownCluster" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "shutdownCluster failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "shutdownCluster failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error18 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error19 error
		error19, err = error18.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error19
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "shutdownCluster failed: invalid message type")
		return
	}
	result := RemoteControllerShutdownClusterResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ClusterId
func (p *RemoteControllerClient) TerminateCluster(clusterId string) (r bool, err error) {
	if err = p.sendTerminateCluster(clusterId); err != nil {
		return
	}
	return p.recvTerminateCluster()
}

func (p *RemoteControllerClient) sendTerminateCluster(clusterId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("terminateCluster", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RemoteControllerTerminateClusterArgs{
		ClusterId: clusterId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *RemoteControllerClient) recvTerminateCluster() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "terminateCluster" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "terminateCluster failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "terminateCluster failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error20 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error21 error
		error21, err = error20.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error21
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "terminateCluster failed: invalid message type")
		return
	}
	result := RemoteControllerTerminateClusterResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - MemberId
func (p *RemoteControllerClient) SplitMemberFromCluster(memberId string) (r *Cluster, err error) {
	if err = p.sendSplitMemberFromCluster(memberId); err != nil {
		return
	}
	return p.recvSplitMemberFromCluster()
}

func (p *RemoteControllerClient) sendSplitMemberFromCluster(memberId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("splitMemberFromCluster", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RemoteControllerSplitMemberFromClusterArgs{
		MemberId: memberId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *RemoteControllerClient) recvSplitMemberFromCluster() (value *Cluster, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "splitMemberFromCluster" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "splitMemberFromCluster failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "splitMemberFromCluster failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error22 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error23 error
		error23, err = error22.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error23
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "splitMemberFromCluster failed: invalid message type")
		return
	}
	result := RemoteControllerSplitMemberFromClusterResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ClusterId
//  - MemberId
func (p *RemoteControllerClient) MergeMemberToCluster(clusterId string, memberId string) (r *Cluster, err error) {
	if err = p.sendMergeMemberToCluster(clusterId, memberId); err != nil {
		return
	}
	return p.recvMergeMemberToCluster()
}

func (p *RemoteControllerClient) sendMergeMemberToCluster(clusterId string, memberId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("mergeMemberToCluster", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RemoteControllerMergeMemberToClusterArgs{
		ClusterId: clusterId,
		MemberId:  memberId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *RemoteControllerClient) recvMergeMemberToCluster() (value *Cluster, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "mergeMemberToCluster" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "mergeMemberToCluster failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "mergeMemberToCluster failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error24 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error25 error
		error25, err = error24.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error25
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "mergeMemberToCluster failed: invalid message type")
		return
	}
	result := RemoteControllerMergeMemberToClusterResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ClusterId
//  - Script
//  - Lang
func (p *RemoteControllerClient) ExecuteOnController(clusterId string, script string, lang Lang) (r *Response, err error) {
	if err = p.sendExecuteOnController(clusterId, script, lang); err != nil {
		return
	}
	return p.recvExecuteOnController()
}

func (p *RemoteControllerClient) sendExecuteOnController(clusterId string, script string, lang Lang) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("executeOnController", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RemoteControllerExecuteOnControllerArgs{
		ClusterId: clusterId,
		Script:    script,
		Lang:      lang,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *RemoteControllerClient) recvExecuteOnController() (value *Response, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "executeOnController" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "executeOnController failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "executeOnController failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error26 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error27 error
		error27, err = error26.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error27
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "executeOnController failed: invalid message type")
		return
	}
	result := RemoteControllerExecuteOnControllerResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type RemoteControllerProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      RemoteController
}

func (p *RemoteControllerProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *RemoteControllerProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *RemoteControllerProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewRemoteControllerProcessor(handler RemoteController) *RemoteControllerProcessor {

	self28 := &RemoteControllerProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self28.processorMap["ping"] = &remoteControllerProcessorPing{handler: handler}
	self28.processorMap["clean"] = &remoteControllerProcessorClean{handler: handler}
	self28.processorMap["exit"] = &remoteControllerProcessorExit{handler: handler}
	self28.processorMap["createCluster"] = &remoteControllerProcessorCreateCluster{handler: handler}
	self28.processorMap["startMember"] = &remoteControllerProcessorStartMember{handler: handler}
	self28.processorMap["shutdownMember"] = &remoteControllerProcessorShutdownMember{handler: handler}
	self28.processorMap["terminateMember"] = &remoteControllerProcessorTerminateMember{handler: handler}
	self28.processorMap["suspendMember"] = &remoteControllerProcessorSuspendMember{handler: handler}
	self28.processorMap["resumeMember"] = &remoteControllerProcessorResumeMember{handler: handler}
	self28.processorMap["shutdownCluster"] = &remoteControllerProcessorShutdownCluster{handler: handler}
	self28.processorMap["terminateCluster"] = &remoteControllerProcessorTerminateCluster{handler: handler}
	self28.processorMap["splitMemberFromCluster"] = &remoteControllerProcessorSplitMemberFromCluster{handler: handler}
	self28.processorMap["mergeMemberToCluster"] = &remoteControllerProcessorMergeMemberToCluster{handler: handler}
	self28.processorMap["executeOnController"] = &remoteControllerProcessorExecuteOnController{handler: handler}
	return self28
}

func (p *RemoteControllerProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x29 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x29.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x29

}

type remoteControllerProcessorPing struct {
	handler RemoteController
}

func (p *remoteControllerProcessorPing) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RemoteControllerPingArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ping", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RemoteControllerPingResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.Ping(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ping: "+err2.Error())
		oprot.WriteMessageBegin("ping", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("ping", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type remoteControllerProcessorClean struct {
	handler RemoteController
}

func (p *remoteControllerProcessorClean) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RemoteControllerCleanArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("clean", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RemoteControllerCleanResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.Clean(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing clean: "+err2.Error())
		oprot.WriteMessageBegin("clean", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("clean", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type remoteControllerProcessorExit struct {
	handler RemoteController
}

func (p *remoteControllerProcessorExit) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RemoteControllerExitArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("exit", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RemoteControllerExitResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.Exit(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing exit: "+err2.Error())
		oprot.WriteMessageBegin("exit", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("exit", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type remoteControllerProcessorCreateCluster struct {
	handler RemoteController
}

func (p *remoteControllerProcessorCreateCluster) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RemoteControllerCreateClusterArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createCluster", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RemoteControllerCreateClusterResult{}
	var retval *Cluster
	var err2 error
	if retval, err2 = p.handler.CreateCluster(args.HzVersion, args.Xmlconfig); err2 != nil {
		switch v := err2.(type) {
		case *ServerException:
			result.ServerException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createCluster: "+err2.Error())
			oprot.WriteMessageBegin("createCluster", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("createCluster", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type remoteControllerProcessorStartMember struct {
	handler RemoteController
}

func (p *remoteControllerProcessorStartMember) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RemoteControllerStartMemberArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("startMember", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RemoteControllerStartMemberResult{}
	var retval *Member
	var err2 error
	if retval, err2 = p.handler.StartMember(args.ClusterId); err2 != nil {
		switch v := err2.(type) {
		case *ServerException:
			result.ServerException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing startMember: "+err2.Error())
			oprot.WriteMessageBegin("startMember", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("startMember", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type remoteControllerProcessorShutdownMember struct {
	handler RemoteController
}

func (p *remoteControllerProcessorShutdownMember) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RemoteControllerShutdownMemberArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("shutdownMember", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RemoteControllerShutdownMemberResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.ShutdownMember(args.ClusterId, args.MemberId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing shutdownMember: "+err2.Error())
		oprot.WriteMessageBegin("shutdownMember", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("shutdownMember", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type remoteControllerProcessorTerminateMember struct {
	handler RemoteController
}

func (p *remoteControllerProcessorTerminateMember) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RemoteControllerTerminateMemberArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("terminateMember", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RemoteControllerTerminateMemberResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.TerminateMember(args.ClusterId, args.MemberId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing terminateMember: "+err2.Error())
		oprot.WriteMessageBegin("terminateMember", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("terminateMember", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type remoteControllerProcessorSuspendMember struct {
	handler RemoteController
}

func (p *remoteControllerProcessorSuspendMember) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RemoteControllerSuspendMemberArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("suspendMember", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RemoteControllerSuspendMemberResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.SuspendMember(args.ClusterId, args.MemberId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing suspendMember: "+err2.Error())
		oprot.WriteMessageBegin("suspendMember", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("suspendMember", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type remoteControllerProcessorResumeMember struct {
	handler RemoteController
}

func (p *remoteControllerProcessorResumeMember) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RemoteControllerResumeMemberArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("resumeMember", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RemoteControllerResumeMemberResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.ResumeMember(args.ClusterId, args.MemberId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing resumeMember: "+err2.Error())
		oprot.WriteMessageBegin("resumeMember", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("resumeMember", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type remoteControllerProcessorShutdownCluster struct {
	handler RemoteController
}

func (p *remoteControllerProcessorShutdownCluster) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RemoteControllerShutdownClusterArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("shutdownCluster", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RemoteControllerShutdownClusterResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.ShutdownCluster(args.ClusterId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing shutdownCluster: "+err2.Error())
		oprot.WriteMessageBegin("shutdownCluster", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("shutdownCluster", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type remoteControllerProcessorTerminateCluster struct {
	handler RemoteController
}

func (p *remoteControllerProcessorTerminateCluster) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RemoteControllerTerminateClusterArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("terminateCluster", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RemoteControllerTerminateClusterResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.TerminateCluster(args.ClusterId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing terminateCluster: "+err2.Error())
		oprot.WriteMessageBegin("terminateCluster", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("terminateCluster", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type remoteControllerProcessorSplitMemberFromCluster struct {
	handler RemoteController
}

func (p *remoteControllerProcessorSplitMemberFromCluster) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RemoteControllerSplitMemberFromClusterArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("splitMemberFromCluster", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RemoteControllerSplitMemberFromClusterResult{}
	var retval *Cluster
	var err2 error
	if retval, err2 = p.handler.SplitMemberFromCluster(args.MemberId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing splitMemberFromCluster: "+err2.Error())
		oprot.WriteMessageBegin("splitMemberFromCluster", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("splitMemberFromCluster", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type remoteControllerProcessorMergeMemberToCluster struct {
	handler RemoteController
}

func (p *remoteControllerProcessorMergeMemberToCluster) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RemoteControllerMergeMemberToClusterArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("mergeMemberToCluster", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RemoteControllerMergeMemberToClusterResult{}
	var retval *Cluster
	var err2 error
	if retval, err2 = p.handler.MergeMemberToCluster(args.ClusterId, args.MemberId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mergeMemberToCluster: "+err2.Error())
		oprot.WriteMessageBegin("mergeMemberToCluster", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("mergeMemberToCluster", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type remoteControllerProcessorExecuteOnController struct {
	handler RemoteController
}

func (p *remoteControllerProcessorExecuteOnController) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RemoteControllerExecuteOnControllerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("executeOnController", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RemoteControllerExecuteOnControllerResult{}
	var retval *Response
	var err2 error
	if retval, err2 = p.handler.ExecuteOnController(args.ClusterId, args.Script, args.Lang); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing executeOnController: "+err2.Error())
		oprot.WriteMessageBegin("executeOnController", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("executeOnController", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type RemoteControllerPingArgs struct {
}

func NewRemoteControllerPingArgs() *RemoteControllerPingArgs {
	return &RemoteControllerPingArgs{}
}

func (p *RemoteControllerPingArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RemoteControllerPingArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ping_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemoteControllerPingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoteControllerPingArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RemoteControllerPingResult struct {
	Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRemoteControllerPingResult() *RemoteControllerPingResult {
	return &RemoteControllerPingResult{}
}

var RemoteControllerPingResult_Success_DEFAULT bool

func (p *RemoteControllerPingResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return RemoteControllerPingResult_Success_DEFAULT
	}
	return *p.Success
}

func (p *RemoteControllerPingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RemoteControllerPingResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RemoteControllerPingResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *RemoteControllerPingResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ping_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemoteControllerPingResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RemoteControllerPingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoteControllerPingResult(%+v)", *p)
}

type RemoteControllerCleanArgs struct {
}

func NewRemoteControllerCleanArgs() *RemoteControllerCleanArgs {
	return &RemoteControllerCleanArgs{}
}

func (p *RemoteControllerCleanArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RemoteControllerCleanArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("clean_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemoteControllerCleanArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoteControllerCleanArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RemoteControllerCleanResult struct {
	Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRemoteControllerCleanResult() *RemoteControllerCleanResult {
	return &RemoteControllerCleanResult{}
}

var RemoteControllerCleanResult_Success_DEFAULT bool

func (p *RemoteControllerCleanResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return RemoteControllerCleanResult_Success_DEFAULT
	}
	return *p.Success
}

func (p *RemoteControllerCleanResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RemoteControllerCleanResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RemoteControllerCleanResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *RemoteControllerCleanResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("clean_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemoteControllerCleanResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RemoteControllerCleanResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoteControllerCleanResult(%+v)", *p)
}

type RemoteControllerExitArgs struct {
}

func NewRemoteControllerExitArgs() *RemoteControllerExitArgs {
	return &RemoteControllerExitArgs{}
}

func (p *RemoteControllerExitArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RemoteControllerExitArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("exit_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemoteControllerExitArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoteControllerExitArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RemoteControllerExitResult struct {
	Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRemoteControllerExitResult() *RemoteControllerExitResult {
	return &RemoteControllerExitResult{}
}

var RemoteControllerExitResult_Success_DEFAULT bool

func (p *RemoteControllerExitResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return RemoteControllerExitResult_Success_DEFAULT
	}
	return *p.Success
}

func (p *RemoteControllerExitResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RemoteControllerExitResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RemoteControllerExitResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *RemoteControllerExitResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("exit_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemoteControllerExitResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RemoteControllerExitResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoteControllerExitResult(%+v)", *p)
}

// Attributes:
//  - HzVersion
//  - Xmlconfig
type RemoteControllerCreateClusterArgs struct {
	HzVersion string `thrift:"hzVersion,1" db:"hzVersion" json:"hzVersion"`
	Xmlconfig string `thrift:"xmlconfig,2" db:"xmlconfig" json:"xmlconfig"`
}

func NewRemoteControllerCreateClusterArgs() *RemoteControllerCreateClusterArgs {
	return &RemoteControllerCreateClusterArgs{}
}

func (p *RemoteControllerCreateClusterArgs) GetHzVersion() string {
	return p.HzVersion
}

func (p *RemoteControllerCreateClusterArgs) GetXmlconfig() string {
	return p.Xmlconfig
}

func (p *RemoteControllerCreateClusterArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RemoteControllerCreateClusterArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.HzVersion = v
	}
	return nil
}

func (p *RemoteControllerCreateClusterArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Xmlconfig = v
	}
	return nil
}

func (p *RemoteControllerCreateClusterArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createCluster_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemoteControllerCreateClusterArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hzVersion", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hzVersion: ", p), err)
	}
	if err := oprot.WriteString(string(p.HzVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hzVersion (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hzVersion: ", p), err)
	}
	return err
}

func (p *RemoteControllerCreateClusterArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("xmlconfig", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:xmlconfig: ", p), err)
	}
	if err := oprot.WriteString(string(p.Xmlconfig)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.xmlconfig (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:xmlconfig: ", p), err)
	}
	return err
}

func (p *RemoteControllerCreateClusterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoteControllerCreateClusterArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - ServerException
type RemoteControllerCreateClusterResult struct {
	Success         *Cluster         `thrift:"success,0" db:"success" json:"success,omitempty"`
	ServerException *ServerException `thrift:"serverException,1" db:"serverException" json:"serverException,omitempty"`
}

func NewRemoteControllerCreateClusterResult() *RemoteControllerCreateClusterResult {
	return &RemoteControllerCreateClusterResult{}
}

var RemoteControllerCreateClusterResult_Success_DEFAULT *Cluster

func (p *RemoteControllerCreateClusterResult) GetSuccess() *Cluster {
	if !p.IsSetSuccess() {
		return RemoteControllerCreateClusterResult_Success_DEFAULT
	}
	return p.Success
}

var RemoteControllerCreateClusterResult_ServerException_DEFAULT *ServerException

func (p *RemoteControllerCreateClusterResult) GetServerException() *ServerException {
	if !p.IsSetServerException() {
		return RemoteControllerCreateClusterResult_ServerException_DEFAULT
	}
	return p.ServerException
}

func (p *RemoteControllerCreateClusterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RemoteControllerCreateClusterResult) IsSetServerException() bool {
	return p.ServerException != nil
}

func (p *RemoteControllerCreateClusterResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RemoteControllerCreateClusterResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Cluster{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *RemoteControllerCreateClusterResult) ReadField1(iprot thrift.TProtocol) error {
	p.ServerException = &ServerException{}
	if err := p.ServerException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServerException), err)
	}
	return nil
}

func (p *RemoteControllerCreateClusterResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createCluster_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemoteControllerCreateClusterResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RemoteControllerCreateClusterResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetServerException() {
		if err := oprot.WriteFieldBegin("serverException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serverException: ", p), err)
		}
		if err := p.ServerException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServerException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serverException: ", p), err)
		}
	}
	return err
}

func (p *RemoteControllerCreateClusterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoteControllerCreateClusterResult(%+v)", *p)
}

// Attributes:
//  - ClusterId
type RemoteControllerStartMemberArgs struct {
	ClusterId string `thrift:"clusterId,1" db:"clusterId" json:"clusterId"`
}

func NewRemoteControllerStartMemberArgs() *RemoteControllerStartMemberArgs {
	return &RemoteControllerStartMemberArgs{}
}

func (p *RemoteControllerStartMemberArgs) GetClusterId() string {
	return p.ClusterId
}

func (p *RemoteControllerStartMemberArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RemoteControllerStartMemberArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *RemoteControllerStartMemberArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("startMember_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemoteControllerStartMemberArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("clusterId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:clusterId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ClusterId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.clusterId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:clusterId: ", p), err)
	}
	return err
}

func (p *RemoteControllerStartMemberArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoteControllerStartMemberArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - ServerException
type RemoteControllerStartMemberResult struct {
	Success         *Member          `thrift:"success,0" db:"success" json:"success,omitempty"`
	ServerException *ServerException `thrift:"serverException,1" db:"serverException" json:"serverException,omitempty"`
}

func NewRemoteControllerStartMemberResult() *RemoteControllerStartMemberResult {
	return &RemoteControllerStartMemberResult{}
}

var RemoteControllerStartMemberResult_Success_DEFAULT *Member

func (p *RemoteControllerStartMemberResult) GetSuccess() *Member {
	if !p.IsSetSuccess() {
		return RemoteControllerStartMemberResult_Success_DEFAULT
	}
	return p.Success
}

var RemoteControllerStartMemberResult_ServerException_DEFAULT *ServerException

func (p *RemoteControllerStartMemberResult) GetServerException() *ServerException {
	if !p.IsSetServerException() {
		return RemoteControllerStartMemberResult_ServerException_DEFAULT
	}
	return p.ServerException
}

func (p *RemoteControllerStartMemberResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RemoteControllerStartMemberResult) IsSetServerException() bool {
	return p.ServerException != nil
}

func (p *RemoteControllerStartMemberResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RemoteControllerStartMemberResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Member{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *RemoteControllerStartMemberResult) ReadField1(iprot thrift.TProtocol) error {
	p.ServerException = &ServerException{}
	if err := p.ServerException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServerException), err)
	}
	return nil
}

func (p *RemoteControllerStartMemberResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("startMember_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemoteControllerStartMemberResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RemoteControllerStartMemberResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetServerException() {
		if err := oprot.WriteFieldBegin("serverException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serverException: ", p), err)
		}
		if err := p.ServerException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServerException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serverException: ", p), err)
		}
	}
	return err
}

func (p *RemoteControllerStartMemberResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoteControllerStartMemberResult(%+v)", *p)
}

// Attributes:
//  - ClusterId
//  - MemberId
type RemoteControllerShutdownMemberArgs struct {
	ClusterId string `thrift:"clusterId,1" db:"clusterId" json:"clusterId"`
	MemberId  string `thrift:"memberId,2" db:"memberId" json:"memberId"`
}

func NewRemoteControllerShutdownMemberArgs() *RemoteControllerShutdownMemberArgs {
	return &RemoteControllerShutdownMemberArgs{}
}

func (p *RemoteControllerShutdownMemberArgs) GetClusterId() string {
	return p.ClusterId
}

func (p *RemoteControllerShutdownMemberArgs) GetMemberId() string {
	return p.MemberId
}

func (p *RemoteControllerShutdownMemberArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RemoteControllerShutdownMemberArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *RemoteControllerShutdownMemberArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MemberId = v
	}
	return nil
}

func (p *RemoteControllerShutdownMemberArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("shutdownMember_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemoteControllerShutdownMemberArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("clusterId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:clusterId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ClusterId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.clusterId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:clusterId: ", p), err)
	}
	return err
}

func (p *RemoteControllerShutdownMemberArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("memberId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:memberId: ", p), err)
	}
	if err := oprot.WriteString(string(p.MemberId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.memberId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:memberId: ", p), err)
	}
	return err
}

func (p *RemoteControllerShutdownMemberArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoteControllerShutdownMemberArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RemoteControllerShutdownMemberResult struct {
	Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRemoteControllerShutdownMemberResult() *RemoteControllerShutdownMemberResult {
	return &RemoteControllerShutdownMemberResult{}
}

var RemoteControllerShutdownMemberResult_Success_DEFAULT bool

func (p *RemoteControllerShutdownMemberResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return RemoteControllerShutdownMemberResult_Success_DEFAULT
	}
	return *p.Success
}

func (p *RemoteControllerShutdownMemberResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RemoteControllerShutdownMemberResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RemoteControllerShutdownMemberResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *RemoteControllerShutdownMemberResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("shutdownMember_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemoteControllerShutdownMemberResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RemoteControllerShutdownMemberResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoteControllerShutdownMemberResult(%+v)", *p)
}

// Attributes:
//  - ClusterId
//  - MemberId
type RemoteControllerTerminateMemberArgs struct {
	ClusterId string `thrift:"clusterId,1" db:"clusterId" json:"clusterId"`
	MemberId  string `thrift:"memberId,2" db:"memberId" json:"memberId"`
}

func NewRemoteControllerTerminateMemberArgs() *RemoteControllerTerminateMemberArgs {
	return &RemoteControllerTerminateMemberArgs{}
}

func (p *RemoteControllerTerminateMemberArgs) GetClusterId() string {
	return p.ClusterId
}

func (p *RemoteControllerTerminateMemberArgs) GetMemberId() string {
	return p.MemberId
}

func (p *RemoteControllerTerminateMemberArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RemoteControllerTerminateMemberArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *RemoteControllerTerminateMemberArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MemberId = v
	}
	return nil
}

func (p *RemoteControllerTerminateMemberArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("terminateMember_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemoteControllerTerminateMemberArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("clusterId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:clusterId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ClusterId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.clusterId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:clusterId: ", p), err)
	}
	return err
}

func (p *RemoteControllerTerminateMemberArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("memberId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:memberId: ", p), err)
	}
	if err := oprot.WriteString(string(p.MemberId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.memberId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:memberId: ", p), err)
	}
	return err
}

func (p *RemoteControllerTerminateMemberArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoteControllerTerminateMemberArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RemoteControllerTerminateMemberResult struct {
	Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRemoteControllerTerminateMemberResult() *RemoteControllerTerminateMemberResult {
	return &RemoteControllerTerminateMemberResult{}
}

var RemoteControllerTerminateMemberResult_Success_DEFAULT bool

func (p *RemoteControllerTerminateMemberResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return RemoteControllerTerminateMemberResult_Success_DEFAULT
	}
	return *p.Success
}

func (p *RemoteControllerTerminateMemberResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RemoteControllerTerminateMemberResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RemoteControllerTerminateMemberResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *RemoteControllerTerminateMemberResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("terminateMember_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemoteControllerTerminateMemberResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RemoteControllerTerminateMemberResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoteControllerTerminateMemberResult(%+v)", *p)
}

// Attributes:
//  - ClusterId
//  - MemberId
type RemoteControllerSuspendMemberArgs struct {
	ClusterId string `thrift:"clusterId,1" db:"clusterId" json:"clusterId"`
	MemberId  string `thrift:"memberId,2" db:"memberId" json:"memberId"`
}

func NewRemoteControllerSuspendMemberArgs() *RemoteControllerSuspendMemberArgs {
	return &RemoteControllerSuspendMemberArgs{}
}

func (p *RemoteControllerSuspendMemberArgs) GetClusterId() string {
	return p.ClusterId
}

func (p *RemoteControllerSuspendMemberArgs) GetMemberId() string {
	return p.MemberId
}

func (p *RemoteControllerSuspendMemberArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RemoteControllerSuspendMemberArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *RemoteControllerSuspendMemberArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MemberId = v
	}
	return nil
}

func (p *RemoteControllerSuspendMemberArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("suspendMember_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemoteControllerSuspendMemberArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("clusterId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:clusterId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ClusterId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.clusterId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:clusterId: ", p), err)
	}
	return err
}

func (p *RemoteControllerSuspendMemberArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("memberId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:memberId: ", p), err)
	}
	if err := oprot.WriteString(string(p.MemberId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.memberId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:memberId: ", p), err)
	}
	return err
}

func (p *RemoteControllerSuspendMemberArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoteControllerSuspendMemberArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RemoteControllerSuspendMemberResult struct {
	Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRemoteControllerSuspendMemberResult() *RemoteControllerSuspendMemberResult {
	return &RemoteControllerSuspendMemberResult{}
}

var RemoteControllerSuspendMemberResult_Success_DEFAULT bool

func (p *RemoteControllerSuspendMemberResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return RemoteControllerSuspendMemberResult_Success_DEFAULT
	}
	return *p.Success
}

func (p *RemoteControllerSuspendMemberResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RemoteControllerSuspendMemberResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RemoteControllerSuspendMemberResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *RemoteControllerSuspendMemberResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("suspendMember_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemoteControllerSuspendMemberResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RemoteControllerSuspendMemberResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoteControllerSuspendMemberResult(%+v)", *p)
}

// Attributes:
//  - ClusterId
//  - MemberId
type RemoteControllerResumeMemberArgs struct {
	ClusterId string `thrift:"clusterId,1" db:"clusterId" json:"clusterId"`
	MemberId  string `thrift:"memberId,2" db:"memberId" json:"memberId"`
}

func NewRemoteControllerResumeMemberArgs() *RemoteControllerResumeMemberArgs {
	return &RemoteControllerResumeMemberArgs{}
}

func (p *RemoteControllerResumeMemberArgs) GetClusterId() string {
	return p.ClusterId
}

func (p *RemoteControllerResumeMemberArgs) GetMemberId() string {
	return p.MemberId
}

func (p *RemoteControllerResumeMemberArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RemoteControllerResumeMemberArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *RemoteControllerResumeMemberArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MemberId = v
	}
	return nil
}

func (p *RemoteControllerResumeMemberArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("resumeMember_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemoteControllerResumeMemberArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("clusterId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:clusterId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ClusterId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.clusterId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:clusterId: ", p), err)
	}
	return err
}

func (p *RemoteControllerResumeMemberArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("memberId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:memberId: ", p), err)
	}
	if err := oprot.WriteString(string(p.MemberId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.memberId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:memberId: ", p), err)
	}
	return err
}

func (p *RemoteControllerResumeMemberArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoteControllerResumeMemberArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RemoteControllerResumeMemberResult struct {
	Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRemoteControllerResumeMemberResult() *RemoteControllerResumeMemberResult {
	return &RemoteControllerResumeMemberResult{}
}

var RemoteControllerResumeMemberResult_Success_DEFAULT bool

func (p *RemoteControllerResumeMemberResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return RemoteControllerResumeMemberResult_Success_DEFAULT
	}
	return *p.Success
}

func (p *RemoteControllerResumeMemberResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RemoteControllerResumeMemberResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RemoteControllerResumeMemberResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *RemoteControllerResumeMemberResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("resumeMember_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemoteControllerResumeMemberResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RemoteControllerResumeMemberResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoteControllerResumeMemberResult(%+v)", *p)
}

// Attributes:
//  - ClusterId
type RemoteControllerShutdownClusterArgs struct {
	ClusterId string `thrift:"clusterId,1" db:"clusterId" json:"clusterId"`
}

func NewRemoteControllerShutdownClusterArgs() *RemoteControllerShutdownClusterArgs {
	return &RemoteControllerShutdownClusterArgs{}
}

func (p *RemoteControllerShutdownClusterArgs) GetClusterId() string {
	return p.ClusterId
}

func (p *RemoteControllerShutdownClusterArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RemoteControllerShutdownClusterArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *RemoteControllerShutdownClusterArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("shutdownCluster_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemoteControllerShutdownClusterArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("clusterId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:clusterId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ClusterId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.clusterId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:clusterId: ", p), err)
	}
	return err
}

func (p *RemoteControllerShutdownClusterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoteControllerShutdownClusterArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RemoteControllerShutdownClusterResult struct {
	Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRemoteControllerShutdownClusterResult() *RemoteControllerShutdownClusterResult {
	return &RemoteControllerShutdownClusterResult{}
}

var RemoteControllerShutdownClusterResult_Success_DEFAULT bool

func (p *RemoteControllerShutdownClusterResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return RemoteControllerShutdownClusterResult_Success_DEFAULT
	}
	return *p.Success
}

func (p *RemoteControllerShutdownClusterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RemoteControllerShutdownClusterResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RemoteControllerShutdownClusterResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *RemoteControllerShutdownClusterResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("shutdownCluster_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemoteControllerShutdownClusterResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RemoteControllerShutdownClusterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoteControllerShutdownClusterResult(%+v)", *p)
}

// Attributes:
//  - ClusterId
type RemoteControllerTerminateClusterArgs struct {
	ClusterId string `thrift:"clusterId,1" db:"clusterId" json:"clusterId"`
}

func NewRemoteControllerTerminateClusterArgs() *RemoteControllerTerminateClusterArgs {
	return &RemoteControllerTerminateClusterArgs{}
}

func (p *RemoteControllerTerminateClusterArgs) GetClusterId() string {
	return p.ClusterId
}

func (p *RemoteControllerTerminateClusterArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RemoteControllerTerminateClusterArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *RemoteControllerTerminateClusterArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("terminateCluster_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemoteControllerTerminateClusterArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("clusterId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:clusterId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ClusterId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.clusterId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:clusterId: ", p), err)
	}
	return err
}

func (p *RemoteControllerTerminateClusterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoteControllerTerminateClusterArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RemoteControllerTerminateClusterResult struct {
	Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRemoteControllerTerminateClusterResult() *RemoteControllerTerminateClusterResult {
	return &RemoteControllerTerminateClusterResult{}
}

var RemoteControllerTerminateClusterResult_Success_DEFAULT bool

func (p *RemoteControllerTerminateClusterResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return RemoteControllerTerminateClusterResult_Success_DEFAULT
	}
	return *p.Success
}

func (p *RemoteControllerTerminateClusterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RemoteControllerTerminateClusterResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RemoteControllerTerminateClusterResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *RemoteControllerTerminateClusterResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("terminateCluster_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemoteControllerTerminateClusterResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RemoteControllerTerminateClusterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoteControllerTerminateClusterResult(%+v)", *p)
}

// Attributes:
//  - MemberId
type RemoteControllerSplitMemberFromClusterArgs struct {
	MemberId string `thrift:"memberId,1" db:"memberId" json:"memberId"`
}

func NewRemoteControllerSplitMemberFromClusterArgs() *RemoteControllerSplitMemberFromClusterArgs {
	return &RemoteControllerSplitMemberFromClusterArgs{}
}

func (p *RemoteControllerSplitMemberFromClusterArgs) GetMemberId() string {
	return p.MemberId
}

func (p *RemoteControllerSplitMemberFromClusterArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RemoteControllerSplitMemberFromClusterArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MemberId = v
	}
	return nil
}

func (p *RemoteControllerSplitMemberFromClusterArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("splitMemberFromCluster_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemoteControllerSplitMemberFromClusterArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("memberId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err)
	}
	if err := oprot.WriteString(string(p.MemberId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err)
	}
	return err
}

func (p *RemoteControllerSplitMemberFromClusterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoteControllerSplitMemberFromClusterArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RemoteControllerSplitMemberFromClusterResult struct {
	Success *Cluster `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRemoteControllerSplitMemberFromClusterResult() *RemoteControllerSplitMemberFromClusterResult {
	return &RemoteControllerSplitMemberFromClusterResult{}
}

var RemoteControllerSplitMemberFromClusterResult_Success_DEFAULT *Cluster

func (p *RemoteControllerSplitMemberFromClusterResult) GetSuccess() *Cluster {
	if !p.IsSetSuccess() {
		return RemoteControllerSplitMemberFromClusterResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RemoteControllerSplitMemberFromClusterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RemoteControllerSplitMemberFromClusterResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RemoteControllerSplitMemberFromClusterResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Cluster{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *RemoteControllerSplitMemberFromClusterResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("splitMemberFromCluster_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemoteControllerSplitMemberFromClusterResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RemoteControllerSplitMemberFromClusterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoteControllerSplitMemberFromClusterResult(%+v)", *p)
}

// Attributes:
//  - ClusterId
//  - MemberId
type RemoteControllerMergeMemberToClusterArgs struct {
	ClusterId string `thrift:"clusterId,1" db:"clusterId" json:"clusterId"`
	MemberId  string `thrift:"memberId,2" db:"memberId" json:"memberId"`
}

func NewRemoteControllerMergeMemberToClusterArgs() *RemoteControllerMergeMemberToClusterArgs {
	return &RemoteControllerMergeMemberToClusterArgs{}
}

func (p *RemoteControllerMergeMemberToClusterArgs) GetClusterId() string {
	return p.ClusterId
}

func (p *RemoteControllerMergeMemberToClusterArgs) GetMemberId() string {
	return p.MemberId
}

func (p *RemoteControllerMergeMemberToClusterArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RemoteControllerMergeMemberToClusterArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *RemoteControllerMergeMemberToClusterArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MemberId = v
	}
	return nil
}

func (p *RemoteControllerMergeMemberToClusterArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("mergeMemberToCluster_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemoteControllerMergeMemberToClusterArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("clusterId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:clusterId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ClusterId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.clusterId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:clusterId: ", p), err)
	}
	return err
}

func (p *RemoteControllerMergeMemberToClusterArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("memberId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:memberId: ", p), err)
	}
	if err := oprot.WriteString(string(p.MemberId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.memberId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:memberId: ", p), err)
	}
	return err
}

func (p *RemoteControllerMergeMemberToClusterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoteControllerMergeMemberToClusterArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RemoteControllerMergeMemberToClusterResult struct {
	Success *Cluster `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRemoteControllerMergeMemberToClusterResult() *RemoteControllerMergeMemberToClusterResult {
	return &RemoteControllerMergeMemberToClusterResult{}
}

var RemoteControllerMergeMemberToClusterResult_Success_DEFAULT *Cluster

func (p *RemoteControllerMergeMemberToClusterResult) GetSuccess() *Cluster {
	if !p.IsSetSuccess() {
		return RemoteControllerMergeMemberToClusterResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RemoteControllerMergeMemberToClusterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RemoteControllerMergeMemberToClusterResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RemoteControllerMergeMemberToClusterResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Cluster{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *RemoteControllerMergeMemberToClusterResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("mergeMemberToCluster_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemoteControllerMergeMemberToClusterResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RemoteControllerMergeMemberToClusterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoteControllerMergeMemberToClusterResult(%+v)", *p)
}

// Attributes:
//  - ClusterId
//  - Script
//  - Lang
type RemoteControllerExecuteOnControllerArgs struct {
	ClusterId string `thrift:"clusterId,1" db:"clusterId" json:"clusterId"`
	Script    string `thrift:"script,2" db:"script" json:"script"`
	Lang      Lang   `thrift:"lang,3" db:"lang" json:"lang"`
}

func NewRemoteControllerExecuteOnControllerArgs() *RemoteControllerExecuteOnControllerArgs {
	return &RemoteControllerExecuteOnControllerArgs{}
}

func (p *RemoteControllerExecuteOnControllerArgs) GetClusterId() string {
	return p.ClusterId
}

func (p *RemoteControllerExecuteOnControllerArgs) GetScript() string {
	return p.Script
}

func (p *RemoteControllerExecuteOnControllerArgs) GetLang() Lang {
	return p.Lang
}

func (p *RemoteControllerExecuteOnControllerArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RemoteControllerExecuteOnControllerArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *RemoteControllerExecuteOnControllerArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Script = v
	}
	return nil
}

func (p *RemoteControllerExecuteOnControllerArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := Lang(v)
		p.Lang = temp
	}
	return nil
}

func (p *RemoteControllerExecuteOnControllerArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("executeOnController_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemoteControllerExecuteOnControllerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("clusterId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:clusterId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ClusterId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.clusterId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:clusterId: ", p), err)
	}
	return err
}

func (p *RemoteControllerExecuteOnControllerArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("script", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:script: ", p), err)
	}
	if err := oprot.WriteString(string(p.Script)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.script (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:script: ", p), err)
	}
	return err
}

func (p *RemoteControllerExecuteOnControllerArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lang", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lang: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Lang)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lang (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lang: ", p), err)
	}
	return err
}

func (p *RemoteControllerExecuteOnControllerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoteControllerExecuteOnControllerArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RemoteControllerExecuteOnControllerResult struct {
	Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRemoteControllerExecuteOnControllerResult() *RemoteControllerExecuteOnControllerResult {
	return &RemoteControllerExecuteOnControllerResult{}
}

var RemoteControllerExecuteOnControllerResult_Success_DEFAULT *Response

func (p *RemoteControllerExecuteOnControllerResult) GetSuccess() *Response {
	if !p.IsSetSuccess() {
		return RemoteControllerExecuteOnControllerResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RemoteControllerExecuteOnControllerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RemoteControllerExecuteOnControllerResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RemoteControllerExecuteOnControllerResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Response{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *RemoteControllerExecuteOnControllerResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("executeOnController_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemoteControllerExecuteOnControllerResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RemoteControllerExecuteOnControllerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoteControllerExecuteOnControllerResult(%+v)", *p)
}
